

* Pakkar og melpa 
** Melpa setup 
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/"))

(package-initialize)


(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(unless (package-installed-p 'spacemacs-theme)
  (package-refresh-contents)
  (package-install 'spacemacs-theme))
#+END_SRC

** Helm onkel dave
#+BEGIN_SRC emacs-lisp
;;Unkel dave sin helm
(use-package helm
  :ensure t
  :bind
  ("C-x C-f" . 'helm-find-files)
  ("C-x C-b" . 'helm-buffers-list)
  ("M-x" . 'helm-M-x)
  :config
  (defun daedreth/helm-hide-minibuffer ()
    (when (with-helm-buffer helm-echo-input-in-header-line)
      (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
        (overlay-put ov 'window (selected-window))
        (overlay-put ov 'face
                     (let ((bg-color (face-background 'default nil)))
                       `(:background ,bg-color :foreground ,bg-color)))
        (setq-local cursor-type nil))))
  (add-hook 'helm-minibuffer-set-up-hook 'daedreth/helm-hide-minibuffer)
  (setq helm-autoresize-max-height 0
        helm-autoresize-min-height 40
        helm-M-x-fuzzy-match t
        helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match t
        helm-semantic-fuzzy-match t
        helm-imenu-fuzzy-match t
        helm-split-window-in-side-p nil
        helm-move-to-line-cycle-in-source nil
        helm-ff-search-library-in-sexp t
        helm-scroll-amount 8 
        helm-echo-input-in-header-line t)
  :init
  (helm-mode 1))

(require 'helm-config)    
(helm-autoresize-mode 1)
(define-key helm-find-files-map (kbd "C-b") 'helm-find-files-up-one-level)
(define-key helm-find-files-map (kbd "C-f") 'helm-execute-persistent-action)

#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC
** Which key 
#+BEGIN_SRC emacs-lisp 
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC
** Regnboge 
#+BEGIN_SRC emacs-lisp 
  (use-package rainbow-mode
  :ensure t
  :init (rainbow-mode 1))
#+END_SRC
** Avy 
 #+BEGIN_SRC emacs-lisp
   (use-package avy
     :ensure t
     :bind
       ("M-s" . avy-goto-char))
 #+END_SRC
* Org  
** Org bulleterino
#+BEGIN_SRC emacs-lisp
;;  (use-package org-bullets
  ;;  :ensure t
   ;; :config
   ;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
;;fy faen ditta va treight 
#+END_SRC
* Alias 
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC 
* Emacs innstillinga 
** Utsjånad 
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq ring-bell-function 'ignore)
(global-hl-line-mode t)
(when window-system  (global-prettify-symbols-mode t)) 
#+END_SRC
** Thinkpad tasta 
#+BEGIN_SRC emacs-lisp
(setq w32-pass-multimedia-buttons-to-system nil)
(global-set-key (kbd "<browser-forward>") 'next-buffer)
(global-set-key (kbd "<browser-back>") 'previous-buffer)
#+END_SRC
** Async 
#+BEGIN_SRC emacs-lisp
(use-package async
  :ensure t
  :init (dired-async-mode 1))
#+END_SRC
** Config hent 
#+BEGIN_SRC emacs-lisp
  (defun hent-config ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'hent-config)
#+END_SRC
** Config last inn på nytt 
#+BEGIN_SRC emacs-lisp
(defun last-config ()
(interactive) 
(org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
(global-set-key (kbd "C-c r") 'last-config)
#+END_SRC
